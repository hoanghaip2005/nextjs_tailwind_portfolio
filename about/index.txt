1:"$Sreact.fragment"
2:I[41402,["619","static/chunks/619-f072ac750404f9da.js","396","static/chunks/396-3f432f11e7318f5a.js","177","static/chunks/app/layout-ba13a4f2361973d1.js"],""]
8:I[57150,[],""]
:HL["/nextjs_tailwind_portfolio/_next/static/css/c288b708d9318c9f.css","style"]
3:T1e68,
          // Prevent browser extensions from interfering with React hydration
          (function() {
            if (typeof window === 'undefined') return;
            
            let isHydrating = true;
            let hydrationComplete = false;
            
            // Mark hydration as complete after a reasonable time
            setTimeout(() => { 
              isHydrating = false; 
              hydrationComplete = true;
            }, 2000);
            
            // Override MutationObserver to prevent extensions from modifying DOM during hydration
            const OriginalMutationObserver = window.MutationObserver;
            window.MutationObserver = function(callback) {
              return new OriginalMutationObserver(function(mutations, observer) {
                if (isHydrating) {
                  // Filter out mutations that add extension attributes during hydration
                  const filteredMutations = mutations.filter(mutation => {
                    if (mutation.type === 'attributes') {
                      const attrName = mutation.attributeName;
                      const target = mutation.target;
                      
                      // Block extension attributes
                      if (attrName && (
                        attrName.includes('bis_') || 
                        attrName.includes('__processed_') ||
                        attrName.includes('_extension_')
                      )) {
                        return false;
                      }
                      
                      // Block cursor style changes that don't match expected patterns
                      if (attrName === 'style' && target.getAttribute('style')?.includes('cursor:pointer')) {
                        const element = target;
                        // Only allow cursor:pointer on actual interactive elements
                        if (!element.matches('a, button, [role="button"], [onclick], input[type="button"], input[type="submit"]')) {
                          return false;
                        }
                      }
                    }
                    return true;
                  });
                  
                  if (filteredMutations.length > 0) {
                    callback(filteredMutations, observer);
                  }
                } else {
                  callback(mutations, observer);
                }
              });
            };
            
            // More aggressive prevention of extension attributes
            const originalSetAttribute = Element.prototype.setAttribute;
            const originalCreateElement = document.createElement;
            
            // Override setAttribute to block extension attributes
            Element.prototype.setAttribute = function(name, value) {
              if (isHydrating && (
                name.includes('bis_') || 
                name.includes('__processed_') ||
                name.includes('_extension_') ||
                name.includes('lastpass') ||
                name.includes('1password') ||
                name.includes('bitwarden')
              )) {
                return; // Block extension attributes during hydration
              }
              return originalSetAttribute.call(this, name, value);
            };
            
            // Override createElement to immediately clean new elements
            document.createElement = function(tagName, options) {
              const element = originalCreateElement.call(this, tagName, options);
              
              // Clean any extension attributes that might be added immediately
              setTimeout(() => {
                if (isHydrating) {
                  const attributesToRemove = [];
                  Array.from(element.attributes || []).forEach(attr => {
                    if (attr.name.startsWith('bis_') || 
                        attr.name.startsWith('__processed_')) {
                      attributesToRemove.push(attr.name);
                    }
                  });
                  attributesToRemove.forEach(attrName => {
                    element.removeAttribute(attrName);
                  });
                }
              }, 0);
              
              return element;
            };
            
            // Restore original methods after hydration
            setTimeout(() => {
              Element.prototype.setAttribute = originalSetAttribute;
              document.createElement = originalCreateElement;
            }, 2500);
            
            // More aggressive early cleanup of extension attributes
            const earlyCleanup = () => {
              // Remove all known extension attributes
              const selectors = [
                '[bis_skin_checked]',
                '[bis_register]', 
                '[__processed_84f11d6a-644c-4b6d-84fb-893448e25421__]',
                '[data-lastpass-icon-root]',
                '[data-1password-extension]',
                '[data-bitwarden-watching]'
              ];
              
              selectors.forEach(selector => {
                try {
                  const elements = document.querySelectorAll(selector);
                  elements.forEach(element => {
                    const attrName = selector.slice(1, -1); // Remove [ and ]
                    element.removeAttribute(attrName);
                  });
                } catch (e) {
                  // Ignore errors for invalid selectors
                }
              });
              
              // Also remove any attributes starting with common extension prefixes
              const allElements = document.querySelectorAll('*');
              allElements.forEach(element => {
                Array.from(element.attributes).forEach(attr => {
                  if (attr.name.startsWith('bis_') || 
                      attr.name.startsWith('__processed_') ||
                      attr.name.startsWith('data-lastpass') ||
                      attr.name.startsWith('data-1password') ||
                      attr.name.startsWith('data-bitwarden')) {
                    element.removeAttribute(attr.name);
                  }
                });
              });
            };
            
            // Run cleanup multiple times during different phases
            const runCleanupCycle = () => {
              earlyCleanup();
              // Run again after a short delay
              setTimeout(earlyCleanup, 50);
              setTimeout(earlyCleanup, 100);
              setTimeout(earlyCleanup, 200);
            };
            
            // Run cleanup before React starts hydrating
            if (document.readyState === 'loading') {
              document.addEventListener('DOMContentLoaded', runCleanupCycle);
            } else {
              runCleanupCycle();
            }
            
            // Also run cleanup when DOM changes
            const observer = new OriginalMutationObserver((mutations) => {
              let needsCleanup = false;
              mutations.forEach(mutation => {
                if (mutation.type === 'attributes' && 
                    mutation.attributeName && 
                    (mutation.attributeName.startsWith('bis_') || 
                     mutation.attributeName.startsWith('__processed_'))) {
                  needsCleanup = true;
                }
              });
              if (needsCleanup && !isHydrating) {
                setTimeout(earlyCleanup, 10);
              }
            });
            
            observer.observe(document.documentElement, {
              attributes: true,
              subtree: true,
              attributeFilter: ['bis_skin_checked', 'bis_register']
            });
          })();
        0:{"P":null,"b":"kNdmSr9a2A587uWM_CQpx","p":"/nextjs_tailwind_portfolio","c":["","about",""],"i":false,"f":[[["",{"children":["about",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/nextjs_tailwind_portfolio/_next/static/css/c288b708d9318c9f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","$L2",null,{"id":"prevent-extension-hydration","strategy":"beforeInteractive","dangerouslySetInnerHTML":{"__html":"$3"}}]}],"$L4"]}]]}],{"children":["about","$L5",{"children":["__PAGE__","$L6",{},null,false]},null,false]},null,false],"$L7",false]],"m":"$undefined","G":["$8",[]],"s":false,"S":true}
9:I[69977,["619","static/chunks/619-f072ac750404f9da.js","396","static/chunks/396-3f432f11e7318f5a.js","177","static/chunks/app/layout-ba13a4f2361973d1.js"],"ThemeProvider"]
a:I[302,["619","static/chunks/619-f072ac750404f9da.js","396","static/chunks/396-3f432f11e7318f5a.js","177","static/chunks/app/layout-ba13a4f2361973d1.js"],"default"]
b:I[69978,["619","static/chunks/619-f072ac750404f9da.js","396","static/chunks/396-3f432f11e7318f5a.js","177","static/chunks/app/layout-ba13a4f2361973d1.js"],"default"]
c:I[38039,["619","static/chunks/619-f072ac750404f9da.js","396","static/chunks/396-3f432f11e7318f5a.js","177","static/chunks/app/layout-ba13a4f2361973d1.js"],"default"]
d:I[94485,["619","static/chunks/619-f072ac750404f9da.js","396","static/chunks/396-3f432f11e7318f5a.js","177","static/chunks/app/layout-ba13a4f2361973d1.js"],"default"]
e:I[9766,[],""]
f:I[98924,[],""]
10:I[37696,["619","static/chunks/619-f072ac750404f9da.js","396","static/chunks/396-3f432f11e7318f5a.js","177","static/chunks/app/layout-ba13a4f2361973d1.js"],"default"]
11:I[81959,[],"ClientPageRoot"]
12:I[28266,["420","static/chunks/420-b65ee6ac1485560f.js","220","static/chunks/app/about/page-31f17d84fb9141ef.js"],"default"]
15:I[24431,[],"OutletBoundary"]
17:I[15278,[],"AsyncMetadataOutlet"]
19:I[24431,[],"ViewportBoundary"]
1b:I[24431,[],"MetadataBoundary"]
1c:"$Sreact.suspense"
4:["$","body",null,{"className":"__variable_8b9118 antialiased dark","suppressHydrationWarning":true,"style":{"background":"var(--bg-layout-base)","color":"var(--txt)","fontFamily":"var(--font-quicksand), \"Quicksand\", sans-serif"},"children":["$","$L9",null,{"children":[["$","$La",null,{}],["$","$Lb",null,{}],["$","$Lc",null,{"children":[["$","$Ld",null,{}],["$","$Le",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lf",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","$L10",null,{}]]}]]}]}]
5:["$","$1","c",{"children":[null,["$","$Le",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lf",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
6:["$","$1","c",{"children":[["$","$L11",null,{"Component":"$12","searchParams":{},"params":{},"promises":["$@13","$@14"]}],null,["$","$L15",null,{"children":["$L16",["$","$L17",null,{"promise":"$@18"}]]}]]}]
7:["$","$1","h",{"children":[null,[["$","$L19",null,{"children":"$L1a"}],null],["$","$L1b",null,{"children":["$","div",null,{"hidden":true,"children":["$","$1c",null,{"fallback":null,"children":"$L1d"}]}]}]]}]
13:{}
14:"$6:props:children:0:props:params"
1a:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
16:null
1e:I[80622,[],"IconMark"]
18:{"metadata":[["$","title","0",{"children":"Hoàng Hải Phạm | Portfolio"}],["$","meta","1",{"name":"description","content":"Portfolio được tái tạo từ hoanghaip2005.github.io bằng Next.js + TailwindCSS"}],["$","meta","2",{"property":"og:title","content":"Hoàng Hải Phạm | Portfolio"}],["$","meta","3",{"property":"og:description","content":"Portfolio được tái tạo từ hoanghaip2005.github.io bằng Next.js + TailwindCSS"}],["$","meta","4",{"property":"og:url","content":"https://hoanghaip2005.github.io/"}],["$","meta","5",{"property":"og:site_name","content":"Hoàng Hải Phạm"}],["$","meta","6",{"property":"og:locale","content":"vi_VN"}],["$","meta","7",{"property":"og:type","content":"website"}],["$","meta","8",{"name":"twitter:card","content":"summary"}],["$","meta","9",{"name":"twitter:title","content":"Hoàng Hải Phạm | Portfolio"}],["$","meta","10",{"name":"twitter:description","content":"Portfolio được tái tạo từ hoanghaip2005.github.io bằng Next.js + TailwindCSS"}],["$","link","11",{"rel":"icon","href":"/nextjs_tailwind_portfolio/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","$L1e","12",{}]],"error":null,"digest":"$undefined"}
1d:"$18:metadata"
